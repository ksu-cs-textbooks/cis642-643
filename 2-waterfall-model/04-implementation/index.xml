




  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
	  

  
	
	  

  
	
		
	  

  
	
		
		
		
	  

  
	
		
	  

  
	
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
	  

  
	
		
		
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Implementation :: K-State CIS 642/643 Textbook</title>
    <link>https://textbooks.cs.ksu.edu/cis642-643/2-waterfall-model/04-implementation/</link>
    <description>We can build it!</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Sep 2024 09:27:11 -0500</lastBuildDate>
    <atom:link href="https://textbooks.cs.ksu.edu/cis642-643/2-waterfall-model/04-implementation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://textbooks.cs.ksu.edu/cis642-643/2-waterfall-model/04-implementation/01-introduction/</link>
      <pubDate>Fri, 24 Aug 2018 10:53:26 -0500</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis642-643/2-waterfall-model/04-implementation/01-introduction/</guid>
      <description>The implementation phase of the waterfall should be the most familiar to you, as it is the actual process of creating the proposed software system. This is, after all, the subject of most of your early coursework - the basics of programming, algorithm design, and considering time and memory complexity of your employed algorithms.&#xA;It is critical that the implementation adhere to the details provided by the design, as this ensures that a large body of programmers can work independently on the aspects of the system.</description>
    </item>
    <item>
      <title>Exercise: Docker Vue Dev Container</title>
      <link>https://textbooks.cs.ksu.edu/cis642-643/2-waterfall-model/04-implementation/exercise-docker-vue-dev/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://textbooks.cs.ksu.edu/cis642-643/2-waterfall-model/04-implementation/exercise-docker-vue-dev/</guid>
      <description>This project will contain the following features:&#xA;Dev Container Base Image VS Code Documentation Node.js and Express backend Vue 3 frontend MySQL and phpMyAdmin service containers Prerequisites Docker Desktop VS Code Dev Containers Extension Docker Extension Step 1 - Define the Dev Container Create a new project folder and open it in VS Code Use the command palette to add dev container files to the project (Documentation) Customize dev container files: devcontainer.</description>
    </item>
  </channel>
</rss>